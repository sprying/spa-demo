define("app/exts/arale/attribute",function(){function t(t){return"[object String]"===j.call(t)}function r(t){return"[object Function]"===j.call(t)}function e(t){return null!=t&&t==t.window}function n(t){if(!t||"[object Object]"!==j.call(t)||t.nodeType||e(t))return!1;try{if(t.constructor&&!w.call(t,"constructor")&&!w.call(t.constructor.prototype,"isPrototypeOf"))return!1}catch(t){return!1}var r;if(O)for(r in t)return w.call(t,r);for(r in t);return void 0===r||w.call(t,r)}function i(t){if(!t||"[object Object]"!==j.call(t)||t.nodeType||e(t)||!t.hasOwnProperty)return!1;for(var r in t)if(t.hasOwnProperty(r))return!1;return!0}function a(t,r){var e;for(e in r)r.hasOwnProperty(e)&&(t[e]=o(r[e],t[e]));return t}function o(t,r){return A(t)?t=t.slice():n(t)&&(n(r)||(r={}),t=a(r,t)),t}function c(t,r,e){for(var n=[],a=r.constructor.prototype;a;)a.hasOwnProperty("attrs")||(a.attrs={}),s(e,a.attrs,a),i(a.attrs)||n.unshift(a.attrs),a=a.constructor.superclass;for(var o=0,c=n.length;o<c;o++)g(t,v(n[o]))}function u(t,r){g(t,v(r,!0),!0)}function s(t,r,e,n){for(var i=0,a=t.length;i<a;i++){var o=t[i];e.hasOwnProperty(o)&&(r[o]=n?r.get(o):e[o])}}function f(t,e){for(var n in e)if(e.hasOwnProperty(n)){var i,a=e[n].value;r(a)&&(i=n.match(_))&&(t[i[1]](l(i[2]),a),delete e[n])}}function l(t){var r=t.match(x),e=r[1]?"change:":"";return e+=r[2].toLowerCase()+r[3]}function h(t,r,e){var n={silent:!0};t.__initializingAttrs=!0;for(var i in e)e.hasOwnProperty(i)&&r[i].setter&&t.set(i,e[i],n);delete t.__initializingAttrs}function v(t,r){var e={};for(var i in t){var a=t[i];!r&&n(a)&&p(a,S)?e[i]=a:e[i]={value:a}}return e}function g(t,r,e){var n,i,a;for(n in r)if(r.hasOwnProperty(n)){if(i=r[n],a=t[n],a||(a=t[n]={}),void 0!==i.value&&(a.value=o(i.value,a.value)),e)continue;for(var c in m){var u=m[c];void 0!==i[u]&&(a[u]=i[u])}}return t}function p(t,r){for(var e=0,n=r.length;e<n;e++)if(t.hasOwnProperty(r[e]))return!0;return!1}function y(r){return null==r||(t(r)||A(r))&&0===r.length||i(r)}function b(t,r){if(t===r)return!0;if(y(t)&&y(r))return!0;var e=j.call(t);if(e!=j.call(r))return!1;switch(e){case"[object String]":return t==String(r);case"[object Number]":return t!=+t?r!=+r:0==t?1/t==1/r:t==+r;case"[object Date]":case"[object Boolean]":return+t==+r;case"[object RegExp]":return t.source==r.source&&t.global==r.global&&t.multiline==r.multiline&&t.ignoreCase==r.ignoreCase;case"[object Array]":var i=t.toString(),a=r.toString();return-1===i.indexOf("[object")&&-1===a.indexOf("[object")&&i===a}if("object"!=typeof t||"object"!=typeof r)return!1;if(n(t)&&n(r)){if(!b(P(t),P(r)))return!1;for(var o in t)if(t[o]!==r[o])return!1;return!0}return!1}var O,d={initAttrs:function(t){var r=this.attrs={},e=this.propsInAttrs||[];c(r,this,e),t&&u(r,t),h(this,r,t),f(this,r),s(e,this,r,!0)},get:function(t){var r=this.attrs[t]||{},e=r.value;return r.getter?r.getter.call(this,e,t):e},set:function(r,e,i){var o={};t(r)?o[r]=e:(o=r,i=e),i||(i={});var c=i.silent,u=i.override,s=this.attrs,f=this.__changedAttrs||(this.__changedAttrs={});for(r in o)if(o.hasOwnProperty(r)){var l=s[r]||(s[r]={});if(e=o[r],l.readOnly)throw new Error("This attribute is readOnly: "+r);l.setter&&(e=l.setter.call(this,e,r));var h=this.get(r);!u&&n(h)&&n(e)&&(e=a(a({},h),e)),s[r].value=e,this.__initializingAttrs||b(h,e)||(c?f[r]=[e,h]:this.trigger("change:"+r,e,h,r))}return this},change:function(){var t=this.__changedAttrs;if(t){for(var r in t)if(t.hasOwnProperty(r)){var e=t[r];this.trigger("change:"+r,e[0],e[1],r)}delete this.__changedAttrs}return this},_isPlainObject:n},j=Object.prototype.toString,w=Object.prototype.hasOwnProperty;!function(){function t(){this.x=1}var r=[];t.prototype={valueOf:1,y:1};for(var e in new t)r.push(e);O="x"!==r[0]}();var A=Array.isArray||function(t){return"[object Array]"===j.call(t)},P=Object.keys;P||(P=function(t){var r=[];for(var e in t)t.hasOwnProperty(e)&&r.push(e);return r});var _=/^(on|before|after)([A-Z].*)$/,x=/^(Change)?([A-Z])(.*)/,S=["value","getter","setter","readOnly"],m=["setter","getter","readOnly"];return d});
//# sourceMappingURL=data:application/json;charset=utf8;base64,
