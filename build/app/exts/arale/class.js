define("app/exts/arale/class",function(){function t(n){if(!(this instanceof t)&&u(n))return r(n)}function n(n){var r,o;for(r in n)o=n[r],t.Mutators.hasOwnProperty(r)?t.Mutators[r].call(this,o):this.prototype[r]=o}function r(r){return r.extend=t.extend,r.implement=n,r}function o(){}function e(t,n,r){for(var o in n)if(n.hasOwnProperty(o)){if(r&&-1===p(r,o))continue;"prototype"!==o&&(t[o]=n[o])}}t.create=function(o,i){function c(){o.apply(this,arguments),this.constructor===c&&this.initialize&&this.initialize.apply(this,arguments)}return u(o)||(i=o,o=null),i||(i={}),o||(o=i.Extends||t),i.Extends=o,o!==t&&e(c,o,o.StaticsWhiteList),n.call(c,i),r(c)},t.extend=function(n){return n||(n={}),n.Extends=this,t.create(n)},t.Mutators={Extends:function(t){var n=this.prototype,r=i(t.prototype);e(r,n),r.constructor=this,this.prototype=r,this.superclass=t.prototype},Implements:function(t){s(t)||(t=[t]);for(var n,r=this.prototype;n=t.shift();)e(r,n.prototype||n)},Statics:function(t){e(this,t)}};var i=Object.__proto__?function(t){return{__proto__:t}}:function(t){return o.prototype=t,new o},c=Object.prototype.toString,s=Array.isArray||function(t){return"[object Array]"===c.call(t)},u=function(t){return"[object Function]"===c.call(t)},p=Array.prototype.indexOf?function(t,n){return t.indexOf(n)}:function(t,n){for(var r=0,o=t.length;r<o;r++)if(t[r]===n)return r;return-1};return t});
//# sourceMappingURL=data:application/json;charset=utf8;base64,
