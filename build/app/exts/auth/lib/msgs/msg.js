define("app/exts/auth/lib/msgs/msg",["jquery","underscore","app/exts/arale/base","app/exts/auth/lib/utils","css!app/exts/auth/lib/msgs/msg.css"],function(e,t,r,s){var a=r.extend({initialize:function(e){var t=this;e||(e={}),a.superclass.initialize.call(t,e)},render:function(){var e=this;if(!e.get("target").length)return!1;var t=e._getWrapper();e.set("wrapper",t),e.get("isExist")||t.hide();var r=e.get("host");r.on("error",function(t){var r=t.rule,s=r.msg("error");e.show("error",s)}),r.on("success",function(t){var r=t.target,s=r.get("target"),a=s.attr("success-msg");a?(style=t.style||"success",e.show(style,a)):e.hide()})},hide:function(){var e=this,t=e.get("wrapper");s.buffer(function(){t.slideUp(e.get("speed"))},50)()},show:function(e,r){var a=this;if(!t.isString(e)||!t.isString(r))return a;var n=a.get("wrapper");s.buffer(function(){var t={style:e,msg:r};a._create(t),n.slideDown(a.get("speed"))},50)()},_create:function(e){var r=this,s=r.get("tpl"),a=r.get("wrapper"),n=t.template(s)(e);return a.html(n)},_getWrapper:function(){var t=this,r=t.get("wrapper"),s=t.get("target");if(!s.length)return t;if(!r.length){var a=s.attr("msg-wrapper");a&&(r=e(a))}if(!r.length){if(s.length>1){s=s.eq(s.length-1);var n=e(s.parent());(n.hasClass("radio")||n.hasClass("checkbox"))&&(s=s.parent())}var n=e(s.parent());r=e('<div class="msg-wrapper"></div>').appendTo(n)}return r},attrs:{host:{value:""},target:{value:"",getter:function(t){return e(t)}},tpl:{value:'<p class="auth-msg auth-<%= style %>"><%= msg %></p>'},wrapper:{value:"",getter:function(t){return e(t)}},isExist:{value:!1,getter:function(e){var t=this,r=t.get("wrapper");return!!r.length&&r.find(".auth-msg").length}},speed:{value:200}}});return a});
//# sourceMappingURL=data:application/json;charset=utf8;base64,
