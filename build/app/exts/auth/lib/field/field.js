define("app/exts/auth/lib/field/field",["jquery","underscore","app/exts/arale/base","app/exts/auth/lib/rule/rule","app/exts/auth/lib/rule/ruleFactory","app/exts/auth/lib/utils"],function(e,t,r,a,n,i){function u(e){var r=n.rules,a={},i=e.attr("test-rules");if(i){var u={};t.each(i.split(","),function(e){r[e]&&(u[e]=r[e])}),r=u}return t.each(r,function(t,r){void 0!=e.attr(r)&&(a[r]={msg:{error:e.attr(r+"-msg"),success:e.attr(r+"-success-msg")||l,warn:e.attr(r+"-warn-msg")||l},propertyValue:e.attr(r)})}),a}function s(t){var r={};if(!(t=e(t))||!t.length)return r;var a=u(t);e.isEmptyObject(a)||(r.rules=a);var n=t.attr("auth-event");return n&&(r.event=n),r}var l="",o={event:"blur",style:{success:"ok",error:"error"}},c=r.extend({Statics:{_defer:new e.Deferred},initialize:function(e,r){var a=this;a._validateDone={},a._cache={};var n=s(e);t.extend(r,o),t.extend(r,n),t.extend(r,{target:e}),a._cfg=r,a._storage={},c.superclass.initialize.call(a,r),a._init()},_init:function(){var e=this,r=e._cfg,a=e.get("target"),u=t.extend({},r.rules);e._groupTarget(),t.each(u,function(t,r){!e._storage[r]&&n.rules[r]&&e._createRule(r,t)}),a.data("data-field",e);var s=a[0];return e._targetBind(r.event||i.getEvent(s)),e.trigger("render"),e},_groupTarget:function(){var r=this,a=r.get("target");if(-1!=e.inArray(a.attr("type"),["checkbox","radio"])){var n=a[0].form,i=a.attr("name"),u=[];t.each(document.getElementsByName(i),function(e){e.form==n&&u.push(e)}),a=e(u),r.set("target",a)}return a},_targetBind:function(e){var t=this,r=t.get("target");return!!r.length&&(r.on(e,function(){setTimeout(function(){t.validate()},0)}),t)},_createRule:function(e,r){var a=this,i=a.get("target");t.extend(r,{value:i.val(),target:i,field:a});var u=n.create(e,r);return a.add(e,u),u},add:function(e,t){var r=this,n=r._storage;return t instanceof a?n[e]=t:S.isFunction(t)&&(n[e]=new a(e,t)),r.set("rules",n),r},remove:function(e){var t=this._storage;return delete t[e],self.set("rules",t),this},rule:function(e){return this.get("rules")[e]},test:function(e){return this.validate(e)},validate:function(r){var a=this,n=[],i=a.get("rules");if(t.isString(r)){var u=r.split(",");t.each(u,function(e){i[e]&&n.push(i[e])})}else t.each(i,function(e){n.push(e)});var s=a.get("exclude");if(""!=s){var l=s.split(",");n=t.filter(n,function(t){return!(-1!=e.inArray(t.get("name"),l))})}if(!a.get("hiddenTest")){a.get("target").attr("disabled")&&(n=[])}var o=new e.Deferred;if(!n.length){var c=new e.Deferred,g=c.promise();return g.then(function(){o.resolve(n),a.trigger("success",{rules:n,target:a})}),c.resolve(),g}a.trigger("beforeTest",{rules:n});var f=new e.Deferred;f.resolve(!0);var v=f.promise();return t.each(n,function(e){v=v.then(function(t){return e.validate()})}),v.then(function(){o.resolve(n),a.trigger("success",{rules:n,target:a})}).fail(function(e){o.reject(e),console.log&&console.log(a.get("name")+"\u5b57\u6bb5\u51fa\u9519\u7684\u89c4\u5219\u662f\uff1a"+e.get("name")),a.trigger("error",{rule:e})}),o.promise()},destroy:function(){var e=this,t=e.get("target"),r=e._cfg;t.off(r.event||i.getEvent(target[0])),t.removeData("data-field")},attrs:{target:{value:"",getter:function(t){return e(t)},setter:function(r){var a=e(r),n=this,i=n.get("rules");return e.isEmptyObject(i)||(t.each(i,function(e){e.set&&e.set("target",a)}),a.data("data-field",n)),a}},name:{value:""},event:{value:"",setter:function(e){return this._targetBind(e),e}},host:{value:""},exclude:{value:""},rules:{value:{}},msg:{value:""}}});return c});
//# sourceMappingURL=data:application/json;charset=utf8;base64,
