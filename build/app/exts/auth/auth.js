define("app/exts/auth/auth",["jquery","underscore","app/exts/arale/base","app/exts/auth/lib/field/field","app/exts/auth/lib/rule/ruleFactory","app/exts/auth/lib/utils"],function(e,t,r,n,i,a){var s=r.extend({Statics:{_defer:new e.Deferred},initialize:function(e,r){var n=this;r||(r={}),e&&t.extend(r,{target:e}),n._storages={},n.AuthConfig=r,s.superclass.initialize.call(n,r)},render:function(){var r=this,n=r.get("target");if(!n.length)return r;var i=n[0].elements;if(!i.length)return r;var a=r.get("fnFilter");return t.each(i,function(n){var i=e(n);if(t.isFunction(a)&&a.call(r,i))return!0;var s=i.attr("type"),u=["BUTTON"],l=n.tagName;if(-1!=e.inArray(l,u))return!0;if("submit"==s)return!0;"SELECT"==l&&i.attr("data-type","select");var f=["radio","checkbox"];if(-1!=e.inArray(s,f)&&i.data("data-field"))return!0;r.add(n)}),n.attr("novalidate","novalidate"),r._submit(),r.trigger("render"),r},_submit:function(){var e=this;if(!e.get("submitTest"))return e;var t=e.get("target");return t.on("submit",function(t){t.preventDefault(),e.test()}),e.on("success",function(){t[0].submit()}),e},add:function(r,i){var s,u,l=this,f="";if(r instanceof n)s=r.get("target"),u=l.getName(s),f=l._storages[u||a.guid()]=r;else{var o=l.get("autoBind");if(s=e(r),!s.length)return!1;u=l.getName(s);var g={event:o?a.getEvent(s):"",host:l,name:u};t.extend(g,i);var d=l.get("fnConfig");t.isFunction(d)&&(g=d.call(l,g,s)),f=l._storages[u]=new n(s,g)}return l.trigger("add",{field:f}),f},remove:function(e){var t=this;return e?t._storages[e]?(delete t._storages[e],console.log&&console.log("\u5220\u9664"+e+" field"),t):void 0:t},getName:function(e){if(!e||!e.length)return"";var t=this,r=a.guid(),n=t.get("useId");return n?e.attr("id")||e.attr("name")||r:e.attr("name")||e.attr("id")||r},fieldTarget:function(e){if(!e)return!1;var t=this,r=t.field(e);return!!r&&r.get("target")},field:function(e){return this.getField(e)},getField:function(e){return this._storages[e]},register:function(e,t){return i.register(e,t),this},test:function(e){return this.validate(e)},validate:function(t){function r(e){if(o>=s.length)return f.then(function(){g.length||(n.set("hasError",!1),n.set("errorFields",[]),a.resolve(s),n.trigger("success",{fields:s}))}).fail(function(){a.reject(g),n.trigger("error",{fields:g})}),f;f=e.test(),o++,f.then(function(){r(s[o])}).fail(function(e){g.push(e.get("field")),n.set("errorFields",g),n.set("hasError",!0),i?(a.reject(g),n.trigger("error",{fields:g})):r(s[o])})}var n=this,i=n.get("stopOnError"),a=new e.Deferred,s=n._filterFields(t);if(!s.length){var u=new e.Deferred,l=u.promise();return l.then(function(){a.resolve(s),n.trigger("success",{fields:s})}),u.resolve(),l}var f,o=0,g=[];return n.trigger("beforeTest",{fields:s}),r(s[o]),a.promise()},_filterFields:function(r){var n=this,i=n.get("fields");if(r){var a=r.split(",");a.length>0&&(r=t.filter(i,function(t){return-1!=e.inArray(t.get("name"),a)}))}else r=i;return r=t.filter(r,function(t){var r=t.get("rules");return!e.isEmptyObject(r)})},destroy:function(){t.each(this.get("fields"),function(e){e.destroy()})},attrs:{target:{value:"",getter:function(t){return e(t)}},rules:{value:{},getter:function(e){return i.rules}},fields:{value:[],getter:function(e){var r=this,n=r._storages,i=[];return t.each(n,function(e){i.push(e)}),i}},fnFilter:{value:""},fnConfig:{value:""},useId:{value:!1},autoBind:{value:!0},stopOnError:{value:!1},submitTest:{value:!0},hasError:{value:!1},errorFields:{value:[]}}});return t.extend(s,{Field:n}),s});
//# sourceMappingURL=data:application/json;charset=utf8;base64,
